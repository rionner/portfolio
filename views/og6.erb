<%= erb(:_nav, :layout => true) %>
<%= erb(:_port_nav, :layout => true) %>

<main>
  <h3>original six</h3>
  <h6>2015</h6>

  <section>
    <img src="http://i.imgur.com/Q5j1IJz.png?1">
  </section>

  <section>
    <h4>The concept</h4>
    <p>
      Present visual comparisons of original six NHL team data.
    </p>
    <h4>The result (v1.0)</h4>
    <p>
      Initial implementation of d3 visualizations for each team. Specifically Wins/Losses and Goals Scored For/Against from 1997-2015.
      <h4><a href="https://github.com/rionner/Original-Six-V1" target="blank">Project Repository</a></h4>
    </p>

    <h4>Tech</h4>
    <ul class="bullet-list">
      <li>Node</li>
      <li>Express</li>
      <li>HTML5</li>
      <li>LESS / CSS</li>
      <li>Javascript / jQuery</li>
      <li>d3</li>
      <li>Nokogiri - NHL data scrape</li>
      <li>MongoDB</li>
      <li>Custom API</li>
    </ul>
  </section>

  <section class="gif">
    <img src="http://i.imgur.com/aVekF0v.gif?1">
  </section>

  <section class="snippets">
    <h4>Snippets</h4>
    <pre class="prettyprint">

  require "nokogiri" # for single pages (use mechanize for multiple pages)
  require "open-uri"
  require 'json'

  global_data = (1997..2014).map do |year|

    year1 = year
    year2 = year.to_i + 1

    # maple leafs
    # url = "http://mapleleafs.nhl.com/club/gamelog.htm?season=#{year1}#{year2}&gameType=3"

    # rangers
    # url = "http://rangers.nhl.com/club/gamelog.htm?season=#{year1}#{year2}&gameType=3"

    # canadiens
    # url = "http://canadiens.nhl.com/club/gamelog.htm?season=#{year1}#{year2}&gameType=2"

    # red wings
    # url = "http://redwings.nhl.com/club/gamelog.htm?season=#{year1}#{year2}&gameType=3"

    # bruins
    # url = "http://bruins.nhl.com/club/gamelog.htm?season=#{year1}#{year2}&gameType=2"

    # blackhawks
    # url = "http://blackhawks.nhl.com/club/gamelog.htm?season=#{year1}#{year2}&gameType=2"
    # puts url

    doc = Nokogiri::HTML(open(url))

    season = { year: "#{year1}-#{year2}", games_played: 0, home_games: 0, road_games: 0, wins: 0, losses: 0, overtime: 0, shootout: 0, team_goals: 0, avg_goals_for: 0, opponent_goals: 0, avg_goals_against: 0, total_attendance: 0, home_attendance: 0 }

    doc.css('.data').map do |item|

      item.css('tr').each do |row|

      # HOME vs ROAD GAME COUNT
        home_road = row.css('td:nth-child(3)').text
        if (home_road === 'H')
          season[:home_games] += 1
        elsif (home_road == 'R')
          season[:road_games] += 1
        end


      # GAME DECISIONS
        # win, loss, and overtime count
        win_loss = row.css('td:nth-child(4)').text

        if (win_loss == 'W')
          season[:wins] += 1
        elsif (win_loss == 'L')
          season[:losses] += 1
        elsif (win_loss == 'O')
          season[:overtime] += 1
        end

        # games resolved by shootout count
        shootout = row.css('td:nth-child(5)').text
        if (shootout == 'SO')
          season[:shootout] += 1
        end

        # total games played
        season[:games_played] = season[:wins].to_i + season[:losses].to_i + season[:overtime].to_i


      # GOAL TOTALS
        # scored by blackhawks
        goals_for = row.css('td:nth-child(8)').text
        if (goals_for)
          season[:team_goals] += goals_for.to_i
        end

        # scored by opponent
        goals_against = row.css('td:nth-child(9)').text
        if (goals_against)
          season[:opponent_goals] += goals_against.to_i
        end


      # GOAL AVERAGES
        # average team goals
        avg_goals_for = season[:team_goals].to_i / season[:games_played].to_i.to_f
        season[:avg_goals_for] = avg_goals_for.round(2)

        # average opponent goals
        avg_goals_against = season[:opponent_goals].to_i / season[:games_played].to_i.to_f
        season[:avg_goals_against] = avg_goals_against.round(2)


      # ATTENDANCE
        # total attendance
        attendance = row.css('td:nth-child(18)').text.to_i
        season[:total_attendance] += attendance

        # total attendance for home games
        if (home_road === 'H')
          season[:home_attendance] += attendance.to_i
        end

      end
    end

    sleep 1
    season
  end


  File.write('data.json', global_data.to_json)

    </pre>
    <p>
      Using the Nokogiri gem to scrape NHL website table data and manipulate the results as needed, then storing all data to a JSON document.
    </p>

    <pre class="prettyprint">

  function plotWinsLosses(data){
    var n = 2; // number of layers
    var m = 18; // number of samples per layer
    var stack = d3.layout.stack();

    // stack bars for total games played
    var wins = data.map(function(d, i) {
      if (!d.playoffs) {
        var year = parseInt(d.year.substr(0, 4));
        return { x: year-1997, y: d.wins, y0: d.losses };
      } else {
        return null;
      }
    }).filter(function(n){return n;});

    // display wins and losses as individual bars
    var losses = data.map(function(d, i) {
      var year = parseInt(d.year.substr(0, 4));
      if (!d.playoffs) {
        return { x: year-1997, y: d.losses, y0: 0 };
      } else {
        return null;
      }
    }).filter(function(n) { return n; });

    var layers=[wins, losses];

    var yGroupMax = d3.max(layers, function(layer) {
      return d3.max(layer, function(d) { return d.y; });
    });

    var yStackMax = d3.max(layers, function(layer) {
      return d3.max(layer, function(d) { return d.y0 + d.y; });
    });

    // etc.
  };

    </pre>
    <p>
      Start of the plotWinsLosses() function to render the Wins/Losses graph in d3.
    </p>
  </section>

</main>

